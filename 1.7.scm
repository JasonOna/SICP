; Exercise 1.7: The good-enough? test used in computing square roots will not
; be very effective for finding the square roots of very small numbers. Also,
; in real computers, arithmetic operations are almost always performed with
; limited precision. This makes our test inadequate for very large numbers.
; Explain these statements, with examples showing how the test fails for small
; and large numbers. An alternative strategy for implementing good-enough? is
; to watch how guess changes from one iteration to the next and to stop when
; the change is a very small fraction of the guess. Design a square-root
; procedure that uses this kind of end test. Does this work better for small
; and large numbers?

; Answer

(define (average x y)
  (/ (+ x y) 2))


(define (improve guess x)
  (average guess (/ x guess)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

; (define (sqrt-iter guess x)
;   (if (good-enough? guess x)
;     guess
;     (sqrt-iter (improve guess x) x)))

; (sqrt-iter 1 0.00000000001)
; Value 0.0312500001065625 This is more like the sqrt of 0.001

; (sqrt-iter 1 10000) ; Value

; Yeah that's a big "meatball"

; Adding a new-good-enough?

(define (new-good-enough? guess x)
  (< (abs (/ (- guess (improve guess x)) guess)) 0.001))

; we compare this guess with how it will be improved... if the change is more
; than 0.1 percent, it will continue. This improved the small value and the
; large one in the following way.

(define (sqrt-iter guess x)
  (if (new-good-enough? guess x)
    guess
    (sqrt-iter (improve guess x) x)))

; (sqrt-iter 1 0.00000000001) ; Value 3.162288643712707e-6

; (sqrt-iter 1 10000) ; Value

; This number was coerced into a float by multiplying by 1.0 and returned 100.00714038711746
; the other value was too big and didn't return anything :P

; (* 1.0 (/ 815697038176959424712547125308055439029452941288827103326838836661721818168457267005873310804221798243404324039591576239369292157239855851646502515432438643320280324472363915167291818704791278699096231303966035974145018337583747082263096938102466558356003519022716404779070679254150054130743097478837114913476953874065085192615115349013096972647276249853866538766584473880049929345679993450810982391732010304091428010028049133328959740210658328677750617502211088242741600134970383215281537812033770782841910555815318527748357638598202157954835119960124905001568911507715266237172344300149837179625289564883495639572195732122109453562238894062352907808342114077884637225007375330136807699690973755862241431697611675233323055345004968424261329011886390664397818278141670526742042448429666047385745575340579214316162669244498867937843150310614845039717979543966560871071761433940815755071359539630570805163788553243441478864956483855229269364730149661186230855068342156215718624839995640137484691990857844964152533611713308160001 8156387984092727877402489824001747775320891841864249127948880450761178314454697273971099232918596136517170550665703328439427915149343021411320848290081833695089504627500953054861463466639230940208473644685673957951826695569275114919900937046748308330682205516797358318572231901001573572560015967254537880606693144462803965958357381027368149931110077910387838372347396609050597618233791692973196812162386445124731250069369568894878917012507790232525869813133406515840330593830878636876132489183026755558727616333429337898117274286737646326940737484274604223090520215597312967954876973015530375095801360073898505580741117221241604587643446465642995036976253157594485721264001133068594702192374178064101964791450865039531384408225063643256750003233681164989994252896625521721784183382247920895031892818314488544982952753557289974393916982151319388335390030722612785408274360548431818448453970439065667853126345345926114514887109165465383922503014988299006080983612659859002376454322707687093854362778306576577610943761587200512))